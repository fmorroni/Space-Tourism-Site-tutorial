/* ------------------- */
/* Custom properties   */
/* ------------------- */

:root {
    /* Note: if we wanted to change the root font-size, doing font-size: 20px; would work but now this value
       would override the browser settings, which doesn't happen if we leave the default value (which usually
       is 16px). However, we can change it and keep the accessibility if we use a percentage value, f.eg:
       font-size: 125%; would enlarge the root element font-size to 20px (assuming default 16px). But it
       would also get bigger if the f.eg the user has a browser setting to enlarge every font. */

    /* ------ */
    /* Colors */
    /* ------ */

    /* Declares the properties as just the hsl values (as opposed to doing for example
       --clr-dark: hsl(230 35% 7%) directly) because apparently this way it's easier
       to later modify the a value.*/
    --clr-dark: 230 35% 7%;
    --clr-light: 231 77% 90%;
    --clr-white: 0 0% 100%;
    
    /* ---------- */
    /* font-sizes */
    /* ---------- */

    /* The syntax is the same as in the font-weight system. 100 through 900 indicate increasing levels of
       weights (or in this case, sizes), with 400 being the normal value (the one used for generic/body text). */
    
    /* The figma design gives font sizes in pixels, but for accessibility reasons we'll use rems (for example
       if the user has set up the browser to show a bigger font to see better, pixel sizes can potentially
       override those settings while rems will take that into account).
       Here our normal font-size is 18px, as the default size for the html element is 16px, the value in rems
       will be (18/16)rem = 1.125rem. */       
    /* As we are working on a mobile-first approach, this are the font sizes for the mobile layout. */

    /* clamp(MIN, VAL, MAX) is resolved as max(MIN, min(VAL, MAX)). So f.eg clamp(5rem, 10rem, 15rem) gets evaluated to
       max(5rem, min(10rem, 15rem)) = max(5rem, 10rem) = 10rem. Of course, using fixed values will always yield the same
       result, so clamp is only useful if at least one value (generally VAL) is a non-fixed value. This is achieved with
       units like vw. And we only use it for the largest font size because it isn't very noticeable for smaller sizes. */
    /* I actually like it more with the fixed sizes. It's not like people can change their device width in real time (except
    of course in pc browsers, but even then it looks better with fixed sizing). */
    /* --fs-900: clamp(5rem, 25vw + 1rem, 9.375rem); */
    --fs-900: 5rem;
    --fs-800: 3.5rem;
    --fs-700: 1.5rem;
    --fs-600: 1rem;
    --fs-500: 1.75rem;
    --fs-400: 0.9375rem;
    --fs-300: 1rem;
    --fs-200: 0.875rem;
    
    /* ------------- */
    /* font-families */
    /* ------------- */

    /* Read https://www.masterclass.com/articles/font-family-guide#the-types-of-font-families for a explanation on font families. */

    --ff-serif: "Bellefair", serif;
    --ff-sans-cond: "Barlow Condensed", sans-serif;
    --ff-sans-normal: "Barlow", sans-serif;

    /* Note: character spacings could also be a good candidate for setting as custom properties, but that's not something that usually
       changes so it's also fine to just add them as regular values. */
    

    /* DOESN'T WORK!!! For some reason media queries don't work with variables, so this is basically useless... */
    /* ------------ */
    /* Device sizes */
    /* ------------ */
    
    /* Could do it this way to make it even more modular, but not really necessary. */
    /* --fs-root: calc(new-val*100%/16)
    font-size: var(--fs-root); */

    /* tablet-width (in px)/--fs-root * 1em */
    /* --tablet-width: calc(768/16 * 1em); 
    --mobile-width: calc(375/16 * 1em);  */
}

/* Bigger than 25em aka tablet */
@media (min-width: 31em) {
    /* We only modify the values that change here, the rest will be inherited from the mobile layout. */
    :root {
        /* If we use the clamp value this --fs-900 should get commented. */
        --fs-900: 9.375rem;
        --fs-800: 5rem;
        --fs-700: 2.5rem;
        --fs-600: 1.5rem;
        --fs-400: 1rem;
    }
}

/* Bigger than 48em aka desktop. Overrides the tablet query (where properties coincide). */
@media (min-width: 66em) {
    /* Here we also only modify the values that change with respect to the tablet layout, so the --fs-900 (if
       we were using it) will get inherited from the tablet layout. */
    :root {
        --fs-800: 6.25rem;
        --fs-700: 3.5rem;
        --fs-600: 2rem;
        --fs-400: 1.125rem;
    }
}

/* -------- */
/* RESET    */
/* -------- */

/* https://piccalil.li/blog/a-modern-css-reset/ */

/* Box sizing rules. */
*, *::before, *::after {
    box-sizing: border-box;
}

/* Reset margins. */
body,
h1,
h2,
h3,
h4,
h5,
p,
figure,
picture {
    margin: 0;
}

/* In order to remove the default boldness of headings (it's not necessary for paragraphs but it's also not bad so...) */
h1,
h2,
h3,
h4,
h5,
h6,
p {
    font-weight: 400;
}

h1,
h2,
h3,
h4 {
    font-family: var(--ff-serif);
}

h1 {
    font-size: var(--fs-900);
}

h2 {
    font-size: var(--fs-800);
}

h3 {
    font-size: var(--fs-700);
}

h4 {
    font-size: var(--fs-600);
}

h5 {
    font-family: var(--ff-sans-cond);
    font-size: var(--fs-500);
    /* ls4.75px+tab */
    letter-spacing: 4.75px;
    color: hsl(var(--clr-light));
}

/* Core body setup. */
body {
    /* Make the body height match the viewport size (window size) */
    min-height: 100vh;
    /* This basically makes the site load faster (not sure what the drawbacks are tho)*/
    text-rendering: optimizeSpeed;
    /* Default is 1.2 and it's too low. */
    line-height: 1.5;

    /* I can do f-f+tab then ffn+tab to do it super fastu */
    font-family: var(--ff-sans-normal);
    /* Here fz+tab and fs4+tab do the trick */
    font-size: var(--fs-400);

    /* bg-c+tab and hvcd+tab */
    background-color: hsl(var(--clr-dark));
    /* c+tab+esc (the ones that have a value autocompleted by emmet need an esc for the following autocomplete) and hvcw+tab */
    color: hsl(var(--clr-white));

    /* This will make it so that all elements inside the body stretch to fill in all the available space. It only works
       thanks to the min-height: 100vh, otherwise the body it self would shrink to fit the content and so all available
       space would by default by occupied. */
    display: grid;
    /* By default with the grid display, all rows would receive the same extra spacing (lets say the the header and main content 
       only use up 50% of the viewport height, with the header height being 10% and the main content 40%. Then the
       grid rows would end up having a height of 10% + 50%/2 = 35% and 40% + 50%/2 = 65%). But we don't want the header row to
       have that extra spacing, so we define the grid-template-rows giving the first row a height of min-content (10% because the
       header goes here) and the the second one a height of 1ft, meaning it should occupy 1 fraction of all the available space. */
    grid-template-rows: min-content 1fr;
}

/* make images easier to work with. */
img,
picture {
    /* Makes it so images get smaller when the viewport gets smaller than the original width. */
    max-width: 100%;
    /* By default images are of display type inline-block, this adds a little spacing on the
       bottom of the image that is annoying. */
    display: block;
}

/* Most elements inherit font properties, which is convenient, but form elements don't. This
   makes form elements easier to work with. */
input,
button,
textarea,
select {
    font: inherit;
    color: inherit;
}

/* Remove animations for people who've turned them off (this is a browser/os setting, not an in-site one).
   It's mostly to increase accessibility of the site.
   They are tagged as !important so this settings will prevail no matter what other settings we have.
*/
@media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
    }
}

/* ------------------- */
/* Utility classes     */
/* ------------------- */

.clr-info {
    --gap: 4rem;
}

.column {
    /* flex-basis: 100% makes the columns have the same width. For why this is see https://youtu.be/u044iM9xsWU?t=892 */
    flex-basis: 100%; /* would be the same as flex: 0 1 100% or flex: 1 1 0 or flex: 1 */
    --flow-space: 2rem;
}

.container {
    /* -inline only takes into account the values in the writing-mode direction. */
    padding-inline: 2em; /* same as padding: 0 2em; if writing-mode is horizontal. */
    margin-inline: auto; /* same as margin: 0 2em; if writing-mode is horizontal. */
    max-width: 80rem; /* could be set with a custom property (the var() thingy) but 
                         it's not necessary if we want the same width for all pages. */
}

.d-block {
    display: block;
}

.flex {
    display: flex;
    gap: var(--gap, 1rem);
    flex-direction: var(--flex-dir, row);
    justify-content: space-around;
}

/* .flow > * + * selects any element that is the adjacent sibling (meaning that it comes directly after) of 
   any other element, when those elements are the children of an element of class flow.
   
   It could also be done using the selector .flow > *:not(:first-child), which selects any element that is 
   not the first child. However, the :first-child pseudo-class adds specificity, which we don't really want
   (the .flow selector already adds the specificity we need) because it may make it more difficult to override
   the settings via another class.
   Note: the :not() pseudo-class doesn't add specificity of its own.
   
   To solve the specificity problem of the above selector we can use the :where() pseudo-class, which takes a 
   selector list as its argument, and selects any element that can be selected by one of the selectors in that list.
   The advantage of :where() is that it always has 0 specificity regardless of the selectors in its argument list.
   So the selector would end up being .flow > *:where(:not(:first-child)).
   The only advantage of this selector over * + * is its readability, but if you actually know your selectors and
   combinators then there should be no problem. */
.flow > * + * {
    /* outline: 1px solid red; */
    margin-top: var(--flow-space, 1rem);
}

.grid {
    display: grid;
    gap: var(--gap, 1rem);
    justify-items: center;
}

.grid-container {
    display: grid;
    margin-inline: 1rem;
    text-align: center;
    place-items: center;
}

.grid-container > * {
    max-width: 50ch;
}

/* We use em instead of rem because there is a bug the makes rem work different in different browsers. See:
   https://medium.com/@barrypeng6/why-should-not-use-rem-unit-in-media-query-5645d0163ce5#:~:text=Unit%20rem%20in%20media%20queries,queries%20before%20the%20bug's%20fixed.
   And this works the same way rems would if they worked correctly because the parent for media queries is always the root element (I think). */
@media (min-width: 66em) {
    .grid-container {
        column-gap: var(--container-gap, 2rem);
        --dummy-columns: 6vw, 1fr;
        /* The 1fr on the left and right "gap-columns" are there to center the content when the screen size is too big
           for the 2em to do the job. */
        grid-template-columns: minmax(var(--dummy-columns)) repeat(2, minmax(min-content, 40rem)) minmax(var(--dummy-columns));
        text-align: left;
    }   
    
    .grid-container > *:first-child {
        justify-self: start;
        grid-column: 2;
    }
    
    .grid-container > *:last-child {
        justify-self: end;
        grid-column: 3;
    }

    .grid-container--home {
        padding-bottom: max(6rem, 20vh);
        align-items: end;
    }
}

.numbered-title {
    font-family: var(--ff-sans-cond);
    font-size: var(--fs-500);
    letter-spacing: 4.75px;
    margin-bottom: 3rem;
    text-transform: uppercase;
}

/* Note: the > (Child combinator) here indicates that only spans that are direct children of an element with
class numbered-title should be selected. If I used .numbered-title span {...} instead, it would select any
span that is descendant of an element with class numbered-title, meaning it could be a grandchild, or
grand-grandchild, etc. (the ' ' (space) combinator is called Descendant combinator). */
.numbered-title > span {
    color: hsl(var(--clr-white)/0.25);
    margin-right: 1em;
    font-weight: bold;
}

/* Screen reader only. For accessibility. It's meant to add extra information to certain elements
that may have a clear purpose visually but wouldn't say much when read with a screen reader. */
.sr-only {
    /* clipping can only be used with absolute positioning */
    position: absolute;
    
    /* Not sure why width and height are 1px instead of 0 */
    width: 1px;
    height: 1px;
    padding: 0;
    
    /* Also not sure why the negative margin. I think it makes the element stick more to the corner
    but don't know why that matters if the element has basically no dimensions. */
    margin: -1px;

    /* The overflow property specifies whether to clip the content or to add scrollbars when
    the content of an element is too big to fit in the specified area.
    hidden - The overflow is clipped, and the rest of the content will be invisible. */
    overflow: hidden;

    /* Make the visible area of the element be a circle of radius 0 (aka make the element invisible).

    Clipping to a 0 area shape has the same effect as using visibility: hidden
    however, visibility:hidden also hides the element from screen readers.

    display:none is similar to visibility:hidden but this declaration doesn't maintain the
    area of the element in place. */
    clip-path: circle(0);

    /* The white-space property sets how white space inside an element is handled.
    nowrap - Collapses white space as for normal, but suppresses line breaks
    (text wrapping) within the source. */
    white-space: nowrap;
    border: 0;
  }

/* colors */

.bg-dark { background-color: hsl(var(--clr-dark)); }
.bg-light { background-color: hsl(var(--clr-light)); }
.bg-white { background-color: hsl(var(--clr-white)); }

.txt-dark { color: hsl(var(--clr-dark)); }
.txt-light { color: hsl(var(--clr-light)); }
.txt-white { color: hsl(var(--clr-white)); }

/* typography */

.ff-serif { font-family: var(--ff-serif); } 
.ff-sans-cond { font-family: var(--ff-sans-cond); } 
.ff-sans-normal { font-family: var(--ff-sans-normal); } 

/* Not sure why Kevin doesn't use rems here */
.letter-spacing-1 { letter-spacing: 4.75px; } 
.letter-spacing-2 { letter-spacing: 2.7px; } 
.letter-spacing-3 { letter-spacing: 2.35px; } 

/* Headings all seem to be written in full uppercase so this can be used to make sure text is uppercase
no matter how we write it. */
.uppercase { text-transform: uppercase; }

.fs-900 { font-size: var(--fs-900); }
.fs-800 { font-size: var(--fs-800); }
.fs-700 { font-size: var(--fs-700); }
.fs-600 { font-size: var(--fs-600); }
.fs-500 { font-size: var(--fs-500); }
.fs-400 { font-size: var(--fs-400); }
.fs-300 { font-size: var(--fs-300); }
.fs-200 { font-size: var(--fs-200); }

.fs-900, h1,
.fs-800, h2,
.fs-700, h3,
.fs-600, h4 {
    line-height: 1.1;
}

/* ------------------- */
/* Components         */
/* ------------------- */

.large-button {
    /* We need position: relative here because the ::after pseudo-element having absolute positioning
       is positioned relative to its closest ancestor with a position other than static (the default
       positioning value), if there is any; otherwise it's placed relative to the root element. So if
       we omitted the relative positioning here, the size of the ::after element (being 100% of the
       parent or inset: 0) would be that of the root element (the whole page). */
    position: relative;
    /* If we omitted the z-index here the button would still work as intended, maybe... Having z-index: on ::after
       would create a stacking context on that pseudo-element contained within the stacking context of the closest ancestor 
       with one. But if we omit the z-index here, no stacking context is created for the large-button element and so ::after's
       would be contained withing the stacking context of the root element's (because we haven't defined a z-index for any
       of ::after's ancestors). This can cause problems in cases were we have multiple stacking contexts in our site.
       Adding z-index: 1 here makes ::after's s-c contained within the large-button. And due to the negative index, ::after
       is bellow the large-button's text (if it's positive, even if smaller than the l-b's it will still be on top op the text
       stack indexes are kinda weird but it doesn't really matter). But this way ::after's background will always remain on top
       of l-b's. As we are using white for both this doesn't matter though. */
    z-index: 1;
    /* Gird allows us to use place-items: center. Flex also works, not sure if it changes anything in this case.
       We use inline-grid/flex instead of just grid/flex because by default grid acts like a block and so it grows
       to fit the available space, which could cause our button to become ginormous. */
    display: inline-grid;
    place-items: center;
    padding: 0 2em;
    border-radius: 50%;
    aspect-ratio: 1;
    /* Removes the underline. */
    text-decoration: none;
    /* Added manually because it's the only element that has one size for both desktop and tablet and another size for mobile */
    font-size: 1.25rem;
}

@media (min-width: 25em) {
    .large-button {
        font-size: 2rem;
    }
}

/* ::after is a pseudo-element that gets appended as a child to the element that's being selected. */
.large-button::after {
    /* If no content value (default to none) is applied to a pseudo-element, the pseudo-element is not generated. */
    content: '';
    /* Absolute so it doesn't alter the position of the parent. */
    position: absolute;
    z-index: -1;
    /* Works but I like more using inset: 0 */
    /* width: 100%;
    height: 100%; */
    /* Inset defines the size of the element by how smaller than the parent element it should be. */
    inset: 0;
    background: hsl( var(--clr-white) / .15);
    border-radius: inherit;
    /* Opacity just for the transition */
    opacity: 0;
    /* Without this, hovering over the ::after pseudo-element would also trigger the hover on the l-b (which doesn't
       seem like it should be the case because :hover is set for the l-b alone). So if I placed my cursor over the
       expanded ::after it would stay that way and not contract. */
    pointer-events: none;
    /* Hover Off */
    /* When I hover off the button this is the only active transition on the button so this one takes effect. */
    /* transition: property duration curve delay;
       https://cubic-bezier.com/#1,-0.36,0,-0.72 */
    transition: 
        opacity 500ms linear,
        transform 900ms cubic-bezier(1,-0.36,0,-0.72);
}

/* Here ::after will get appended to elements of class large-button that are being hovered over.
   We also use the :focus pseudo-class so the animation gets triggered for users that navigate with keyboard. */
.large-button:hover::after,
.large-button:focus::after {
    /* We use transform and opacity because these are apparently the only two properties that don't cause 
       reflows and repaints and are calculated with the GPU, which gives far better optimization when dealing
       with transitions/animations.
       https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/#:~:text=The%20transform%20and%20opacity%20properties,completely%20offloaded%20to%20the%20GPU).
       */
    opacity: 1;
    transform: scale(1.5);
    /* inset: -2.7em; */

    /* Hover On */
    /* When I hover over the button, this transition has higher specificity than the one on l-n::after
       and so this one takes effect. */
    transition: 
        opacity 500ms linear,
        transform 750ms ease-in-out;
}

.primary-navigation {
    background-color: hsl(var(--clr-white)/.04);
    /* If I don't set font-size here then all my em values will be with respect to the body font-size, since
       that's what the element is inheriting (so the values would stay the same even if I change the li/a font-sizes).
       I ended up setting it with the class fs-300 in the ul which seems a litter better (same idea tho). */
    /* font-size: var(--fs-300); */
    --gap: 8rem;
    --underline-gap: 2em;
    justify-content: center;
    list-style: none;
    margin: 0;
    padding: 0;
}

.primary-navigation a {
    text-decoration: none;
}

.primary-navigation a > span {
    font-weight: 700;
    margin-right: .5em;
}


.underline-indicators > * {
    /* To reset the bg and border of any element that may have one by default (*cough* buttons *cough*). */
    background: none;
    border: 0;
    /* If I add the border here with 0 opacity I can then change just the color in the other cases.
       This way if wanted to change the width or style I only have to do it in one place. */
    border-bottom: 0.2rem solid hsl(var(--clr-white)/0);
    /* For elements that don't change cursor to pointer by default. */
    cursor: pointer;
    padding: var(--underline-gap, 1em) 0;
}

/* Here we need :focus-within instead of just :focus because the li isn't the element actually being focused
   when tabbing.  */
.underline-indicators > *:hover,
.underline-indicators > *:focus-within {
    /* border-bottom: 3px solid hsl(var(--clr-white)/.5); Don't use pixels */
    border-color: hsl(var(--clr-white)/.5);
    outline: 0;
}

/* Anchor tags have an ugly outline when focused which is not necessary if we already have the underline-indicator */
.underline-indicators a:focus {
    outline: 0;
}

/* The active selector needs to be below the hover because this way it has precedence over it and the active
   underline doesn't change on hover. */
.underline-indicators > /* * the universal selector here is redundant */.active,
/* Aria stands for Accessible Reach Internet Applications and it's used to make sites more accessible by giving
   extra context to assistive technologies. With links this is not necessary as we are changing html pages when
   we click one, but with buttons in the tab list we will remain in the same page an change the visibility on some
   content. This is no problem for regular users but for screen readers it can be a problem, so the aria-selected: true
   tells the screen reader which is the active tab (and so what content should be read out loud). */
.underline-indicators > [aria-selected="true"] {
    color: hsl(var(--clr-white));
    border-color: hsl(var(--clr-white));
}

.tab-list {
    --underline-gap: 0.8em;
    --gap: 2em;
}

/* This declarations are probably fine here with the button selector since we'll probably never use a button
   without this settings. But Kevin  */
/* button {
    cursor: pointer;
    background: none;
    border: 0;
} */

.dot-indicators > * {
    aspect-ratio: 1;
    width: 1rem;
    border: 0;
    border-radius: 50%;
    background: hsl(var(--clr-white)/.2);
    cursor: pointer;
}

.dot-indicators > *:hover,
.dot-indicators > *:focus {
    background: hsl(var(--clr-white)/.5);
    outline: 0;
}

.dot-indicators > [aria-selected="true"] {
    background: hsl(var(--clr-white));
}

.numbered-indicators {
    --flex-dir: column;
    --gap: 1em;
}

.numbered-indicators > * {
    aspect-ratio: 1;
    border: 0;
    border-radius: 50%;
    background: none;
    cursor: pointer;
    outline: 0.1rem solid hsl(var(--clr-white)/.25);
    width: 2.5em;
}

.numbered-indicators > *:hover,
.numbered-indicators > *:focus {
    outline: 0.1rem solid hsl(var(--clr-white));
}

.numbered-indicators > [aria-selected="true"] {
    background: hsl(var(--clr-white));
    color: hsl(var(--clr-dark));
    outline: 0;
}

/* ----------- */
/* Backgrounds */
/* ----------- */

.home {
    background-image: url(../assets/home/background-home-mobile.jpg);
    background-position: bottom;
    background-size: cover;
}

@media (min-width: 31em) {
    .home {
        background-image: url(../assets/home/background-home-tablet.jpg);
        /* Here we change the position because the Earth made the text hard to read on tablet. */
        background-position: center;
    }
}

@media (min-width: 66em) {
    .home {
        background-image: url(../assets/home/background-home-desktop.jpg);
    }
}